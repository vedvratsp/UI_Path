/**
 * File: ActivityMonitor.js
 * Owning Team: POP/AuthZeN
 *
 * This file is automaticaly generated by compiling the ActivityMonitor.ts file and should not
 * be manually updated except to maintain this comment. All code changes should be made in the
 * typescript file and manually compiled.  The product from that process should be used to replace
 * this file.
 */

let IssoCookieMissingError = (() => {
    class IssoCookieMissingError extends Error {
        constructor() {
            super(`${IssoCookieMissingError.message}`);
            this.__proto__ = IssoCookieMissingError.prototype;
        }
    }
    IssoCookieMissingError.message = 'Error: Idle tracking cookie is missing.';
    return IssoCookieMissingError;
})();
class IssoPolicySettings {
    constructor(cookieValue) {
        this.Delimiter = ",";
        let parts = cookieValue.split(this.Delimiter);
        if (parts.length == 5) {
            this.WarnAfter = Number(parts[1]);
            this.SignOutAfter = Number(parts[2]);
            this.WarnAt = Number(parts[3]);
            this.SignOutAt = Number(parts[4]);
        }
        else {
            throw new Error();
        }
    }
    AreConsistent() {
        let valid = true;
        if (this.WarnAfter == 0 || this.SignOutAfter == 0 || this.WarnAt == 0 || this.SignOutAt == 0) {
            valid = false;
        }
        else if (this.WarnAfter >= this.SignOutAfter) {
            valid = false;
        }
        else if (this.WarnAt >= this.SignOutAt) {
            valid = false;
        }
        return valid;
    }
    Update() {
        let currentTime = Date.now();
        this.WarnAt = currentTime + (this.WarnAfter * 1000);
        this.SignOutAt = currentTime + (this.SignOutAfter * 1000);
    }
    BuildCookieValue() {
        let cookieValue = String(true) + this.Delimiter +
            String(this.WarnAfter) + this.Delimiter +
            String(this.SignOutAfter) + this.Delimiter +
            String(this.WarnAt) + this.Delimiter +
            String(this.SignOutAt);
        return cookieValue;
    }
}
let IdleSessionActivityMonitor = (() => {
    class IdleSessionActivityMonitor {
        constructor() {
            this.IssoCookieName = "isso";
            this.HostDomain = document.location.hostname.split(".").slice(-2).join(".");
            this.warnDialogId = 'SPWarnDialog';
            this.warnDialogIframeId = 'SPWarnDialogIframe';
            this.skew = 1 * 1000;
            this.warningVisible = false;
            this.HandleClick = () => {
                if (this.warningVisible) {
                    this.DismissWarning();
                }
                else {
                    IdleSessionActivityMonitor.LogIssoActivity();
                }
            };
            this.topDocument = window.top.document;
            window.addEventListener('click', IdleSessionActivityMonitor.LogIssoActivity);
            this.InitializeWarningDialog();
        }
        static get EncodedSignBackInUrl() {
            return encodeURIComponent(window.top.location.href);
        }
        static get warnDialogPage() {
            if (IdleSessionActivityMonitor._warnDialogPage === null) {
                IdleSessionActivityMonitor._warnDialogPage = IdleSessionActivityMonitor.GetIdleWarningUrl();
            }
            return IdleSessionActivityMonitor._warnDialogPage;
        }
        static get signOutPage() {
            if (IdleSessionActivityMonitor._signOutPage === null) {
                IdleSessionActivityMonitor._signOutPage = IdleSessionActivityMonitor.GetSignoutUrl();
            }
            return IdleSessionActivityMonitor._signOutPage;
        }
        static GetInstance() {
            if (IdleSessionActivityMonitor.instance == null) {
                IdleSessionActivityMonitor.instance = new IdleSessionActivityMonitor();
            }
            return IdleSessionActivityMonitor.instance;
        }
        static Run() {
            try {
                if (IdleSessionActivityMonitor.ParseAbtCookie()) {
                    IdleSessionActivityMonitor.RunABT();
                }
                else {
                    IdleSessionActivityMonitor.GetInstance().topDocument.addEventListener("click", IdleSessionActivityMonitor.GetInstance().HandleClick);
                    try {
                        IdleSessionActivityMonitor.RunISSO();
                    }
                    catch (e) {
                        if (e instanceof IssoCookieMissingError) {
                        }
                        else {
                            console.warn(e);
                        }
                    }
                }
            }
            catch (e) {
                console.warn(e);
            }
        }
        static LogIssoActivity() {
            const instance = IdleSessionActivityMonitor.GetInstance();
            try {
                instance.InitializeSettingsFromCookie();
                instance.settings.Update();
                if (instance.settings.AreConsistent()) {
                    instance.SetCookie(instance.settings.BuildCookieValue());
                }
            }
            catch (e) {
                console.warn(e);
            }
        }
        static RunABT() {
            try {
                window.addEventListener('message', IdleSessionActivityMonitor.ConfirmAbtInitialization);
                window[IdleSessionActivityMonitor.shellKeyName].Abt.Init(IdleSessionActivityMonitor.abtParameters.timeout, IdleSessionActivityMonitor.abtParameters.signInState, IdleSessionActivityMonitor.abtParameters.controls, IdleSessionActivityMonitor.abtParameters.sessionId);
                window.addEventListener('message', IdleSessionActivityMonitor.ProcessMessage);
            }
            catch (e) {
                console.warn(e);
            }
        }
        static ConfirmAbtInitialization(event) {
            if (event.data !== null) {
                const eventDetails = JSON.parse(event.data);
                if (eventDetails && IdleSessionActivityMonitor.abtInitializationEventId !== eventDetails.eventId) {
                }
                else if (eventDetails.detail.initializeResult !== 'true') {
                    console.warn("Failed to load ABT module: " + eventDetails.detail.initializeMessage);
                }
                else {
                }
            }
        }
        static ProcessMessage(event) {
            if (event.data !== null) {
                const eventDetails = JSON.parse(event.data);
                if (eventDetails && IdleSessionActivityMonitor.abtEventIds.indexOf(eventDetails.eventId) > -1) {
                    const signoutUrl = IdleSessionActivityMonitor.GetSignoutUrl();
                    window.location.href = signoutUrl;
                }
            }
        }
        static ParseAbtCookie() {
            let abtCookieValue = document.cookie
                .split(';')
                .map((c) => c.trim())
                .filter((cookie) => {
                return cookie.substring(0, IdleSessionActivityMonitor.abtCookieName.length) === IdleSessionActivityMonitor.abtCookieName;
            })
                .map((cookie) => {
                return decodeURIComponent(cookie.substring(IdleSessionActivityMonitor.abtCookieName.length + 1));
            })[0];
            try {
                abtCookieValue = atob(abtCookieValue);
                if (!abtCookieValue) {
                    return false;
                }
                else {
                    const parameters = abtCookieValue.split(',');
                    if (parameters.length === 4) {
                        IdleSessionActivityMonitor.abtParameters = {
                            timeout: parameters[0],
                            signInState: parameters[1],
                            controls: parameters[2],
                            sessionId: parameters[3]
                        };
                        return true;
                    }
                    else if (parameters.length === 3) {
                        IdleSessionActivityMonitor.abtParameters = {
                            timeout: parameters[0],
                            signInState: parameters[1],
                            sessionId: parameters[2]
                        };
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
            catch (e) {
                console.warn(e);
                return false;
            }
        }
        static RunISSO() {
            if (window.location.pathname.search("SignOut.aspx") != -1 ||
                window.location.pathname.search("IdleWarning.aspx") != -1) {
                return;
            }
            try {
                const waitTime = IdleSessionActivityMonitor.GetInstance().GetTimeToNextCheck();
                if (waitTime > 0) {
                    window.setTimeout(IdleSessionActivityMonitor.RunISSO, waitTime);
                }
            }
            catch (e) {
                if (e instanceof IssoCookieMissingError) {
                    console.warn(e);
                }
                else {
                    IdleSessionActivityMonitor.GetInstance().ForceSignOut();
                }
            }
        }
        static GetDocumentOrigin() {
            let origin = "";
            if (!window.location.origin) {
                origin = window.location.protocol + "//" + window.location.hostname;
            }
            else {
                origin = window.location.origin;
            }
            return origin;
        }
        static GetSignoutUrl() {
            let url = IdleSessionActivityMonitor.GetDocumentOrigin() + IdleSessionActivityMonitor.baseSignoutPath + IdleSessionActivityMonitor.EncodedSignBackInUrl;
            if (IdleSessionActivityMonitor.IsAppWebUrl()) {
                let safePath = IdleSessionActivityMonitor.GetAppWebSafePath();
                if (safePath) {
                    url = IdleSessionActivityMonitor.GetDocumentOrigin() + safePath + IdleSessionActivityMonitor.baseSignoutPath + IdleSessionActivityMonitor.EncodedSignBackInUrl;
                }
                else {
                    url = "";
                }
            }
            return url;
        }
        static GetIdleWarningUrl() {
            let url = IdleSessionActivityMonitor.GetDocumentOrigin() + "/_layouts/15/IdleWarning.aspx";
            if (IdleSessionActivityMonitor.IsAppWebUrl()) {
                let safePath = IdleSessionActivityMonitor.GetAppWebSafePath();
                if (safePath) {
                    url = IdleSessionActivityMonitor.GetDocumentOrigin() + safePath + "/_layouts/15/IdleWarning.aspx";
                }
                else {
                    url = "";
                }
            }
            return url;
        }
        static GetAppWebSafePath() {
            let path = null;
            if (typeof _spPageContextInfo !== 'undefined') {
                path = _spPageContextInfo.webServerRelativeUrl;
            }
            return path;
        }
        static IsAppWebUrl() {
            let result = false;
            let domainPrefix = document.location.host.substring(0, document.location.host.indexOf("."));
            let idx = domainPrefix.indexOf("-");
            if (idx == -1) {
                return false;
            }
            let ids = domainPrefix.substring(idx + 1);
            if (ids.length == (IdleSessionActivityMonitor.MaxAppSiteDomainIdsChars + IdleSessionActivityMonitor.MaxAppWebDomainIdsChars) ||
                ids.length == IdleSessionActivityMonitor.MaxAppSiteDomainIdsChars) {
                result = IdleSessionActivityMonitor.ValidateStringIsHex(ids);
            }
            else {
                result = false;
            }
            return result;
        }
        static ValidateStringIsHex(value) {
            if (!value) {
                return false;
            }
            let validChar = '0123456789ABCDEFabcdef';
            let strlen = value.length;
            if (strlen < 1) {
                return false;
            }
            for (let i = 0; i < strlen; i++) {
                if (validChar.indexOf(value.charAt(i)) < 0) {
                    return false;
                }
            }
            return true;
        }
        GetTimeToNextCheck() {
            let currentTime = Date.now();
            this.InitializeSettingsFromCookie();
            if (currentTime > this.settings.SignOutAt) {
                this.ForceSignOut();
            }
            else if (currentTime > this.settings.WarnAt) {
                if (!this.warningVisible) {
                    this.RenderWarning();
                }
            }
            else {
                if (this.warningVisible) {
                    this.DismissWarning();
                }
            }
            this.nextCheck = Math.min(this.settings.WarnAfter, this.settings.SignOutAfter - this.settings.WarnAfter);
            return this.nextCheck;
        }
        ForceSignOut() {
            this.DeleteCookie();
            window.top.location.href = IdleSessionActivityMonitor.GetSignoutUrl();
        }
        DismissWarning() {
            let dialog = this.topDocument.getElementById(this.warnDialogId);
            dialog.style.display = "none";
            this.warningVisible = false;
            IdleSessionActivityMonitor.LogIssoActivity();
        }
        RenderWarning() {
            let dialog = this.topDocument.getElementById(this.warnDialogId);
            dialog.style.display = "block";
            let iframe = this.topDocument.getElementById(this.warnDialogIframeId);
            let height = iframe.contentWindow.document.body.scrollHeight + "px";
            iframe.style.height = height;
            this.warningVisible = true;
        }
        InitializeSettingsFromCookie() {
            this.settings = new IssoPolicySettings(this.GetCookieValue());
            if (!this.settings.AreConsistent()) {
                throw new Error();
            }
        }
        GetCookieValue() {
            let cookieValue = document.cookie
                .split(';')
                .map(c => c.trim())
                .filter(cookie => {
                return cookie.substring(0, this.IssoCookieName.length) === this.IssoCookieName;
            })
                .map(cookie => {
                return decodeURIComponent(cookie.substring(this.IssoCookieName.length + 1));
            })[0] || null;
            if (typeof (cookieValue) == 'undefined' || cookieValue == null) {
                throw new IssoCookieMissingError();
            }
            cookieValue = atob(cookieValue);
            return cookieValue;
        }
        SetCookie(cookieValue) {
            cookieValue = btoa(cookieValue);
            const cookieString = this.IssoCookieName + "=" + cookieValue + "; domain=" + this.HostDomain + "; path=/; secure; ";
            document.cookie = cookieString;
        }
        DeleteCookie() {
            let cookieString = this.IssoCookieName + "=; domain=" + this.HostDomain + "; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; ";
            document.cookie = cookieString;
        }
        InitializeWarningDialog() {
            if (!!this.topDocument.getElementById(this.warnDialogId)) {
                return;
            }
            else if (IdleSessionActivityMonitor.warnDialogPage === "") {
                return;
            }
            let warningContainer = this.topDocument.createElement('div');
            let warningDiv = this.topDocument.createElement('div');
            let iframe = this.topDocument.createElement('iframe');
            warningContainer.style.display = "none";
            warningContainer.setAttribute('id', this.warnDialogId);
            iframe.setAttribute('id', this.warnDialogIframeId);
            iframe.setAttribute('src', IdleSessionActivityMonitor.warnDialogPage);
            iframe.setAttribute('scrolling', 'no');
            warningDiv.appendChild(iframe);
            warningContainer.appendChild(warningDiv);
            this.topDocument.body.insertBefore(warningContainer, this.topDocument.body.lastChild.nextSibling);
            warningContainer.style.top = "50%";
            warningContainer.style.left = "50%";
            warningContainer.style.zIndex = "9999";
            warningContainer.style.position = "absolute";
            warningDiv.style.marginLeft = "-170px";
            warningDiv.style.marginTop = "-200px";
            warningDiv.style.boxShadow = "0 0 5px 0 rgba(0,0,0,.4)";
            warningDiv.style.backgroundColor = "#ffffff";
            iframe.style.overflow = "hidden";
        }
    }
    IdleSessionActivityMonitor.abtCookieName = 'spo_abt';
    IdleSessionActivityMonitor.shellKeyName = 'O365Shell';
    IdleSessionActivityMonitor.abtInitializationEventId = 'abtInitializeResult';
    IdleSessionActivityMonitor.abtEventIds = [
        'abtSignOutEventForHost',
        'abtSignOutEventForHostUserGenerated'
    ];
    IdleSessionActivityMonitor.baseSignoutPath = '/_layouts/15/SignOut.aspx?isso=true&returnUri=';
    IdleSessionActivityMonitor.instance = null;
    IdleSessionActivityMonitor._warnDialogPage = null;
    IdleSessionActivityMonitor._signOutPage = null;
    IdleSessionActivityMonitor.MaxAppSiteDomainIdsChars = 6;
    IdleSessionActivityMonitor.MaxAppWebDomainIdsChars = 8;
    return IdleSessionActivityMonitor;
})();
if (document.readyState === "complete") {
    IdleSessionActivityMonitor.Run();
}
else {
    document.addEventListener('readystatechange', function () {
        if (document.readyState === "complete") {
            IdleSessionActivityMonitor.Run();
        }
    });
}
//# sourceMappingURL=ActivityMonitor.js.map